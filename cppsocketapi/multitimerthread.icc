/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 2005-2012 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: discussion@sctp.de
 *          dreibh@iem.uni-due.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Multi Timer Thread Inlines
 *
 */


#ifndef MULTITIMERTHREAD_ICC
#define MULTITIMERTHREAD_ICC


#include "randomizer.h"


// ###### Constructor #######################################################
template<const cardinal Timers> MultiTimerThread<Timers>::MultiTimerThread(
                                   const char*    name,
                                   const cardinal flags)
   : Thread(name,flags)
{
   for(cardinal i = 0;i < Timers;i++) {
      Parameters[i].Running         = false;
      Parameters[i].Updated         = true;
      Parameters[i].FastStart       = true;
      Parameters[i].Interval        = (card64)-1;
      Parameters[i].TimerCorrection = 10;
      Parameters[i].CallLimit       = false;
      LeaveCorrectionLoop[i]        = false;
   }
}


// ###### Destructor ########################################################
template<const cardinal Timers> MultiTimerThread<Timers>::~MultiTimerThread()
{
}


// ###### Reimplementation of cancel() ######################################
template<const cardinal Timers> void MultiTimerThread<Timers>::cancel()
{
   synchronized();
   Shutdown = true;
   unsynchronized();
}


// ###### Reimplementation of stop() ########################################
template<const cardinal Timers> void* MultiTimerThread<Timers>::stop()
{
   synchronized();
   Shutdown = true;
   unsynchronized();
   join();
   return(NULL);
}


// ###### Check for pending shutdown ########################################
template<const cardinal Timers> bool MultiTimerThread<Timers>::isShuttingDown()
{
   synchronized();
   const bool shutdownPending = Shutdown;
   unsynchronized();
   return(shutdownPending);
}


// ###### The thread's run() implementation #################################
template<const cardinal Timers> void MultiTimerThread<Timers>::run()
{
   // ====== Initialize =====================================================
   synchronized();
   Shutdown          = false;
   ParametersUpdated = true;

   Randomizer      random;
   TimerParameters parameters[Timers];
   card64          calls[Timers];
   card64          next[Timers];

   for(cardinal i = 0;i < Timers;i++) {
      parameters[i] = Parameters[i];
      parameters[i].Updated = true;
      next[i]  = 0;
      calls[i] = 0;
   }
   unsynchronized();

   card64 now           = getMicroTime();
   card64 nextTimeStamp = now;
   while(!isShuttingDown()) {
      synchronized();

      // ====== Check for parameter updates =================================
      if(ParametersUpdated) {
         ParametersUpdated = false;

         // ====== Update changed parameters ================================
         for(cardinal i = 0;i < Timers;i++) {
            if(Parameters[i].Updated) {
               parameters[i] = Parameters[i];
               Parameters[i].Updated = false;
               if(parameters[i].Running == true) {
                  if(parameters[i].FastStart == false) {
                     if((parameters[i].Interval != 0) && (!parameters[i].CallLimit)) {
                        next[i] = now + (random.random32() % parameters[i].Interval);
                     }
                     else {
                        next[i] = now + parameters[i].Interval;
                     }
                  }
                  else {
                     next[i] = now;
                  }
               }
               calls[i] = 0;
            }
         }
      }

      // ====== Calculate next timestamp ====================================
      now  = getMicroTime();
      nextTimeStamp = now + UpdateResolution;
      for(cardinal i = 0;i < Timers;i++) {
         if(parameters[i].Running == true) {
            nextTimeStamp = std::min(nextTimeStamp,next[i]);
         }
      }

      unsynchronized();

      // ====== Delay for calculated time ===================================
      if(nextTimeStamp >= now) {
         delay(nextTimeStamp - now,false);
      }


      // ====== Invoke timer event ==========================================
      now = getMicroTime();
      for(cardinal i = 0;i < Timers;i++) {
         if((parameters[i].Running == true) &&
            (now >= next[i])) {
            if((parameters[i].CallLimit > 0) && (calls[i] >= parameters[i].CallLimit)) {
               parameters[i].Running = false;
            }
            next[i] += parameters[i].Interval;
            timerEvent(i);
            calls[i]++;
         }
      }


      // ====== Do timer correction =========================================
      nextTimeStamp = now + UpdateResolution;
      for(cardinal i = 0;i < Timers;i++) {
         if(parameters[i].Running == true) {
            if(now >= next[i]) {
               if(now < next[i] + (parameters[i].TimerCorrection * parameters[i].Interval)) {
                  while(next[i] < now) {
                     synchronized();
                     bool leave = false;
                     if(LeaveCorrectionLoop[i]) {
                        LeaveCorrectionLoop[i] = false;
                        leave = true;
                     }
                     unsynchronized();
                     if(leave) {
                        break;
                     }
                     next[i] += parameters[i].Interval;

                     timerEvent(i);
                     calls[i]++;

                     now = getMicroTime();
                     if((parameters[i].CallLimit > 0) && (calls[i] >= parameters[i].CallLimit)) {
                        parameters[i].Running = false;
                     }
                     if(next[i] >= now) {
                        break;
                     }
                  }
               }
               else {
                  now = getMicroTime();
                  next[i] = now + parameters[i].Interval;
               }
            }
         }
      }
   }
}


// ###### Get interval ######################################################
template<const cardinal Timers> inline card64 MultiTimerThread<Timers>::getInterval(
                                                 const cardinal timer)
{
   if(timer < Timers) {
      synchronized();
      const card64 interval = Parameters[timer].Interval;
      unsynchronized();
      return(interval);
   }
   return(0);
}


// ###### Set new interval ##################################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setInterval(
                                               const cardinal timer,
                                               const card64   usec,
                                               const card64   callLimit)
{
   if(timer < Timers) {
      synchronized();
      LeaveCorrectionLoop[timer]  = false;
      Parameters[timer].Interval  = usec;
      Parameters[timer].Updated   = true;
      Parameters[timer].CallLimit = callLimit;
      Parameters[timer].Running   = (usec > 0);
      ParametersUpdated           = true;
      unsynchronized();
   }
}


// ###### Set time to next invokation #######################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setNextAction(
                                               const cardinal timer,
                                               const card64   usec,
                                               const card64   callLimit)
{
   setFastStart(timer,0);
   setInterval(timer,usec,callLimit);
}


// ###### Set time to next invokation #######################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setNextActionAbs(
                                               const cardinal timer,
                                               const card64   timeStamp,
                                               const card64   callLimit)
{
   const card64 now = getMicroTime();
   setFastStart(timer,0);
   if((int64)timeStamp - (int64)now > 0) {
      setInterval(timer,timeStamp - now,callLimit);
   }
   else {
      setInterval(timer,1,callLimit);
   }
}


// ###### Get timer correction mode #########################################
template<const cardinal Timers> inline cardinal MultiTimerThread<Timers>::getTimerCorrection(
                                                   const cardinal timer)
{
   if(timer < Timers) {
      synchronized();
      const cardinal correction = Parameters[timer].TimerCorrection;
      unsynchronized();
      return(correction);
   }
   return(0);
}


// ###### Leave correction loop #############################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::leaveCorrectionLoop(
                                               const cardinal timer)
{
   if(timer < Timers) {
      synchronized();
      LeaveCorrectionLoop[timer] = true;
      unsynchronized();
   }
}


// ###### Set timer correction mode #########################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setTimerCorrection(
                                               const cardinal timer,
                                               const cardinal maxCorrection)
{
   if(timer < Timers) {
      synchronized();
      Parameters[timer].TimerCorrection = maxCorrection;
      Parameters[timer].Updated         = true;
      ParametersUpdated                 = true;
      unsynchronized();
   }
}


// ###### Get fast start mode ###############################################
template<const cardinal Timers> inline bool MultiTimerThread<Timers>::getFastStart(
                                               const cardinal timer) const
{
   if(timer < Timers) {
      const bool fastStart = Parameters[timer].FastStart;
      return(fastStart);
   }
   return(false);
}


// ###### Set fast start mode ###############################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setFastStart(
                                               const cardinal timer,
                                               const bool     on)
{
   if(timer < Timers) {
      Parameters[timer].FastStart = on;
   }
}


#endif
