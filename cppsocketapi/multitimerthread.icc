/*
 *  $Id: multitimerthread.icc,v 1.2 2003/08/19 19:24:25 tuexen Exp $
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2003 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * There are two mailinglists available at http://www.sctp.de which should be
 * used for any discussion related to this implementation.
 *
 * Contact: discussion@sctp.de
 *          dreibh@exp-math.uni-essen.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Multi Timer Thread Inlines
 *
 */


#ifndef MULTITIMERTHREAD_ICC
#define MULTITIMERTHREAD_ICC



// ###### Get interval ######################################################
template<const cardinal Timers> inline card64 MultiTimerThread<Timers>::getInterval(
                                                 const cardinal timer) const
{
   if(timer < Timers) {
      ((MultiTimerThread<Timers>*)this)->synchronized();
      const card64 interval = Parameters[timer].Interval;
      ((MultiTimerThread<Timers>*)this)->unsynchronized();
      return(interval);
   }
   return(0);
}


// ###### Set new interval ##################################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setInterval(
                                               const cardinal timer,
                                               const card64   usec,
                                               const card64   callLimit)
{
   if(timer < Timers) {
      synchronized();
      LeaveCorrectionLoop[timer]  = false;
      Parameters[timer].Interval  = usec;
      Parameters[timer].Updated   = true;
      Parameters[timer].CallLimit = callLimit;
      Parameters[timer].Running   = (usec > 0);
      ParametersUpdated           = true;
      unsynchronized();
   }
}


// ###### Set time to next invokation #######################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setNextAction(
                                               const cardinal timer,
                                               const card64   usec,
                                               const card64   callLimit)
{
   setFastStart(timer,0);
   setInterval(timer,usec,callLimit);
}


// ###### Set time to next invokation #######################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setNextActionAbs(
                                               const cardinal timer,
                                               const card64   timeStamp,
                                               const card64   callLimit)
{
   const card64 now = getMicroTime();
   setFastStart(timer,0);
   if((int64)timeStamp - (int64)now > 0) {
      setInterval(timer,timeStamp - now,callLimit);
   }
   else {
      setInterval(timer,1,callLimit);
   }
}


// ###### Get timer correction mode #########################################
template<const cardinal Timers> inline cardinal MultiTimerThread<Timers>::getTimerCorrection(
                                                   const cardinal timer) const
{
   if(timer < Timers) {
      ((MultiTimerThread<Timers>*)this)->synchronized();
      const cardinal correction = Parameters[timer].TimerCorrection;
      ((MultiTimerThread<Timers>*)this)->unsynchronized();
      return(correction);
   }
   return(0);
}


// ###### Leave correction loop #############################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::leaveCorrectionLoop(
                                               const cardinal timer)
{
   if(timer < Timers) {
      LeaveCorrectionLoop[timer] = true;
   }
}


// ###### Set timer correction mode #########################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setTimerCorrection(
                                               const cardinal timer,
                                               const cardinal maxCorrection)
{
   if(timer < Timers) {
      synchronized();
      Parameters[timer].TimerCorrection = maxCorrection;
      Parameters[timer].Updated         = true;
      ParametersUpdated                 = true;
      unsynchronized();
   }
}


// ###### Get fast start mode ###############################################
template<const cardinal Timers> inline bool MultiTimerThread<Timers>::getFastStart(
                                               const cardinal timer) const
{
   if(timer < Timers) {
      const bool fastStart = Parameters[timer].FastStart;
      return(fastStart);
   }
   return(false);
}


// ###### Set fast start mode ###############################################
template<const cardinal Timers> inline void MultiTimerThread<Timers>::setFastStart(
                                               const cardinal timer,
                                               const bool     on)
{
   if(timer < Timers) {
      Parameters[timer].FastStart = on;
   }
}


#endif
