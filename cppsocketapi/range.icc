/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 2005-2009 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: discussion@sctp.de
 *          dreibh@iem.uni-due.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Range Template
 *
 */


#ifndef RANGE_ICC
#define RANGE_ICC


#include "range.h"


// ###### Set limits ########################################################
template<class T> inline void Range<T>::setLimits(const T min, const T max)
{
   init(min,max,getValue());
}


// ###### Set value #########################################################
template<class T> inline void Range<T>::setValue(const T value)
{
   Value = value;
   if(Value != 0) {
      if(Value < Min) Value = Min;
      if(Value > Max) Value = Max;
   }
}


// ###### "="-operator ######################################################
template<class T> Range<T>& Range<T>::operator=(const Range<T>& range)
{
   Min   = range.Min;
   Max   = range.Max;
   Value = range.Value;
   return(*this);
}


// ###### "=="-operator #####################################################
template<class T> int Range<T>::operator==(const Range<T>& range) const
{
   return((Min == range.Min) && (Max == range.Max) && (Value == range.Value));
}


// ###### "!="-operator #####################################################
template<class T> int Range<T>::operator!=(const Range<T>& range) const
{
   return((Min != range.Min) || (Max != range.Max) || (Value != range.Value));
}


// ###### Get minimum #######################################################
template<class T> inline T Range<T>::getMin() const
{
   return(Min);
}


// ###### Get maximum #######################################################
template<class T> inline T Range<T>::getMax() const
{
   return(Max);
}


// ###### Get value #########################################################
template<class T> inline T Range<T>::getValue() const
{
   return(Value);
}


#endif
