#!/bin/bash
# $Id$
#
# Debian Packaging Scripts
# Copyright (C) 2002-2012 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de


# ###########################################################################
# This list contains the C++ symbols for which the mangled
# symbol has to be replaced by a c++/regex pattern.
# Use case: symbols which are different on 32/64 bit systems,
#           e.g. functions using size_t parameters.
CPP_SYMBOLS_TO_BE_REPLACED='
Wavetoraw::setcurrentpoint
'

# To replace ALL symbols, set CPP_SYMBOLS_REPLACE_ALL=1!
CPP_SYMBOLS_REPLACE_ALL=1
# ###########################################################################


replaceCount=0
replaceFile=`tempfile`

IFS=$'\n'
while read line ; do
   found=0
   if [[ ! "$line" =~ ^( ) ]] ; then   # No space at begin -> begin of new library
      cat $replaceFile | sort -u
      truncate --size 0 $replaceFile
      echo "$line"
   else   # Space at begin -> library symbol
      # ====== Replace symbols in list ======================================
      if [ $CPP_SYMBOLS_REPLACE_ALL -ne 1 ] ; then
         symbol=`echo $line | sed -e 's/^ //g' -e 's/@Base .*$//g'`
         version=`echo $line | sed -e 's/^ .* //g'`
         fullDemangledSymbol=`c++filt $symbol`
         demangledSymbol=`echo $fullDemangledSymbol | sed -e 's/(\(.\)*)$//g'`

         for replaceSymbol in $CPP_SYMBOLS_TO_BE_REPLACED ; do
            # echo >&2 "<$demangledSymbol> <--> <$replaceSymbol>"
            if [ "$demangledSymbol" == "$replaceSymbol" ] ; then
               echo " (c++|regex)\"^$replaceSymbol\(.*\)@Base\" $version" >>$replaceFile
               found=1
               let replaceCount=$replaceCount+1
               break
            fi
         done
         if [ $found -eq 0 ] ; then
            echo "$line"
         fi

      # ====== Replace ALL symbols ==========================================
      else
         originalSymbol="$line"
         demangledSymbol=`echo $originalSymbol | c++filt `
         if [[ $demangledSymbol =~ ^( )([^\(\)]*)(\(.*\)|)( const|)(@Base )(.*) ]] ; then
            # ====== Dissect input line =====================================
            symbol="${BASH_REMATCH[2]}"
            parameters="${BASH_REMATCH[3]}"
            qualifier="${BASH_REMATCH[4]}"
            atBase="${BASH_REMATCH[5]}"
            version="${BASH_REMATCH[6]}"

            #echo "-----------"
            #echo "  symbol=${symbol}."
            #echo "  parameters=${parameters}."
            #echo "  qualifier=${qualifier}."
            #echo "  atBase=${atBase}."
            #echo "  version=${version}."

            skipSymbol=0
            symbolIsOptional=0
            needsRegEx=0
            needsReplacementOfSymbol=0
            needsReplacementOfParameters=0

            # ====== Check symbol ===========================================
            if [[ $symbol =~ (virtual thunk to |construction vtable for ) ]] ; then
               # Case #1: C++ virtual function stuff
               needsReplacementOfSymbol=1
            elif [[ $symbol =~ (void std::) ]] ; then
               # Case #2: C++ STL template stuff -> skip it!
               skipSymbol=1
               # Write C++ regexp to avoid warnings
               echo " (optional|c++|regex)\"^void std::.*@Base\$\" $version" >>$replaceFile
            elif [[ $symbol =~ ^([^\<]*)\<(.*)\>([^\<\>]*) ]] ; then
               # Case #3: template symbol
               nonTemplateSymbolBegin="${BASH_REMATCH[1]}"
               template="${BASH_REMATCH[2]}"
               nonTemplateSymbolEnd="${BASH_REMATCH[3]}"
               if [[ $template =~ (.*)(long,|long const,|long\)|long const\)|long\>|long const\>|long$|long const$)(.*) ]] ; then
                  # Case #3a: template with "long" -> replace
                  symbol="${nonTemplateSymbolBegin}<.*>${nonTemplateSymbolEnd}"
                  needsRegEx=1
                  needsReplacementOfSymbol=1
               else
                  # Case 3a: no need to replace
                  true
               fi
            fi


            # ====== Check parameters =======================================
            if [ "$parameters" = "" ] ; then
               # Case #1: no parameters (non-function)
               needsReplacementOfParameters=0
            elif [ "$parameters" = "()" ] ; then
               # Case #2: no parameters (function)
               needsReplacementOfParameters=0
            elif [[ $parameters =~ (.*)(long*|long const*|long&|long const&|long,|long const,|long\)|long const\)|long\>|long const\>|long$|long const$)(.*) ]] ; then
               # Case #3: parameters with "long" -> replace
               needsReplacementOfParameters=1
            fi


            # ====== Apply replacements =====================================
            if [ $skipSymbol -ne 0 ] ; then
               # ------ Nothing to do: skip symbol --------------------------
               true
            elif [ $needsReplacementOfSymbol -ne 0 -o $needsReplacementOfParameters -ne 0 ] ; then
               # ------ Optional symbol (STL stuff, etc.) -------------------
               optional=""
               if [ $symbolIsOptional -ne 0 ] ; then
                  optional="optional|"
               fi

               # ------ Get new symbol --------------------------------------
               newSymbol=`echo $symbol| sed -e "s/\+/\\\\\+/g"`

               # ------ Get new parameters ----------------------------------
               newParameters=$parameters
               if [[ "$parameters" =~ ^\((.*)\) ]] ; then
                  # This is a function, i.e. () or (parameters).
                  pureParameterList=${BASH_REMATCH[1]}
                  if [ $needsReplacementOfParameters -ne 0 ] ; then
                     newParameters="\(.*\)"
                     needsRegEx=1
                  else
                     newParameters="(${pureParameterList})"
                     if [ $needsRegEx -ne 0 ] ; then   # with RegExp -> \(...\)
                        newParameters=`echo $newParameters| sed -e "s/\*/\\\\\*/g" -e "s/(/\\\\\(/g" -e "s/)/\\\\\)/g"`
                     fi
                  fi
               fi

               # ------ Write replacement -----------------------------------
               if [ $needsRegEx -ne 0 ] ; then
                  # ------ Needs RegEx to replace parameters ----------------
                  echo " (${optional}c++|regex)\"^$newSymbol${newParameters}$qualifier@Base\$\" $version" >>$replaceFile
               else
                  # ------ Just use C++ replacement -------------------------
                  echo " (${optional}c++)\"$newSymbol${newParameters}$qualifier@Base\" $version" >>$replaceFile
               fi
               let replaceCount=$replaceCount+1
            else
               # ------ No replacement -> write symbol as is ----------------
               echo "$originalSymbol"
            fi
         else
            echo "$originalSymbol"
         fi
      fi
   fi
done

cat $replaceFile | sort -u
rm -f $replaceFile


echo >&2 "Replaced $replaceCount symbol(s)."
