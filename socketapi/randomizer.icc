/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2011 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: discussion@sctp.de
 *          dreibh@iem.uni-due.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Randomizer Implementation
 *
 */



#ifndef RANDOMIZER_ICC
#define RANDOMIZER_ICC


#include "randomizer.h"



// ###### Generate next random number #######################################
inline card8 Randomizer::random8()
{
   Value = (Value * 31415821) + 1;
   return((card8)(Value & 0xff));
}


// ###### Generate next random number #######################################
inline card16 Randomizer::random16()
{
   Value = (Value * 31415821) + 1;
   return((card16)(Value & 0xffff));
}


// ###### Generate next random number #######################################
inline card32 Randomizer::random32()
{
   Value = (Value * 31415821) + 1;
   return((card32)(Value & 0xffffffff));
}


// ###### Generate next random number #######################################
inline card64 Randomizer::random64()
{
   const card32 Value1 = (Value * 31415821) + 1;
   Value = (Value1 * 31415821) + 1;
   return(((card64)Value1 << 32) | (card64)Value);
}


// ###### Generate next random number #######################################
inline double Randomizer::random()
{
   const card64 factor = (card64)1 << 63;
   const card64 number = random64() & ~factor;
   if(number == 0)
      return(1.0);
   return((double)number / (double)factor);
}


#endif
