/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2006 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * There are two mailinglists available at http://www.sctp.de which should be
 * used for any discussion related to this implementation.
 *
 * Contact: discussion@sctp.de
 *          dreibh@exp-math.uni-essen.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Randomizer Implementation
 *
 */



#ifndef RANDOMIZER_ICC
#define RANDOMIZER_ICC


#include "randomizer.h"



// ###### Generate next random number #######################################
inline card8 Randomizer::random8()
{
   Value = (Value * 31415821) + 1;
   return((card8)(Value & 0xff));
}


// ###### Generate next random number #######################################
inline card16 Randomizer::random16()
{
   Value = (Value * 31415821) + 1;
   return((card16)(Value & 0xffff));
}


// ###### Generate next random number #######################################
inline card32 Randomizer::random32()
{
   Value = (Value * 31415821) + 1;
   return((card32)(Value & 0xffffffff));
}


// ###### Generate next random number #######################################
inline card64 Randomizer::random64()
{
   const card32 Value1 = (Value * 31415821) + 1;
   Value = (Value1 * 31415821) + 1;
   return(((card64)Value1 << 32) | (card64)Value);
}


// ###### Generate next random number #######################################
inline double Randomizer::random()
{
   const card64 factor = (card64)1 << 63;
   const card64 number = random64() & ~factor;
   if(number == 0)
      return(1.0);
   return((double)number / (double)factor);
}


#endif
