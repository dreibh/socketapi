/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2011 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: discussion@sctp.de
 *          dreibh@iem.uni-due.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Internet Address Implementation
 *
 */

#ifndef INTERNETADDRESS_ICC
#define INTERNETADDRESS_ICC


#include "internetaddress.h"



// ###### Check, if IPv6 can be used ########################################
inline bool InternetAddress::hasIPv6()
{
   return(InternetAddress::UseIPv6);
}


// ###### Check, if address is loopback address #############################
inline bool InternetAddress::isNull() const
{
   for(cardinal i = 0;i < 8;i++) {
      if(AddrSpec.Host16[i] != 0x0000) {
         if(!((i == 5) && (AddrSpec.Host16[i] == 0xffff))) {
            return(false);
         }
      }
   }
   return(Port == 0);
}


// ###### Check, if address is IPv6 (not IPv4-mapped) #######################
inline bool InternetAddress::isIPv6() const
{
   return(!IN6_IS_ADDR_V4MAPPED(&AddrSpec.Address));
}


// ###### Check, if address is IPv4 or IPv4-mapped ##########################
inline bool InternetAddress::isIPv4() const
{
   return(IN6_IS_ADDR_V4MAPPED(&AddrSpec.Address) || IN6_IS_ADDR_UNSPECIFIED(&AddrSpec.Address));
}


// ###### Check, if address is IPv4-compatible IPv6 address #################
inline bool InternetAddress::isIPv4compatible() const
{
   return(IN6_IS_ADDR_V4COMPAT(&AddrSpec.Address));
}


// ###### Check, if address is null #########################################
inline bool InternetAddress::isLoopback() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_LOOPBACK(&AddrSpec.Address));
   }
   const card8 a = (card8)(ntohs(AddrSpec.Host16[6]) >> 8);
   return(a == IN_LOOPBACKNET);
}


// ###### Check, if address is unspecified ##################################
inline bool InternetAddress::isUnspecified() const
{
   for(cardinal i = 0;i < 8;i++) {
      if(&AddrSpec.Host16[i] != 0x0000) {
         if(!((i == 5) && (AddrSpec.Host16[i] == 0xffff))) {
            return(false);
         }
      }
   }
   return(true);
}


// ###### Check, if address is multicast ####################################
inline bool InternetAddress::isMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MULTICAST(&AddrSpec.Address));
   }
   return(IN_MULTICAST(ntohl(AddrSpec.Host32[3])));
}


// ###### Check, if address is unicast ######################################
inline bool InternetAddress::isUnicast() const
{
   return(!(isMulticast() || isBroadcast()));
}


// ###### Check, if address is broadcast ####################################
inline bool InternetAddress::isBroadcast() const
{
   if(isIPv6()) {
      return(false);
   }
   return(ntohl(AddrSpec.Host32[3]) == INADDR_BROADCAST);
}


// ###### Check, if address is reserved #####################################
inline bool InternetAddress::isReserved() const
{
   if(isIPv6()) {
      // This sould be extended...
      return(false);
   }
   return( IN_BADCLASS(ntohl(AddrSpec.Host32[3])) ||
           IN_EXPERIMENTAL(ntohl(AddrSpec.Host32[3])) );
}


// ###### Check, if address is link local ###################################
inline bool InternetAddress::isLinkLocal() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_LINKLOCAL(&AddrSpec.Address));
   }
   return((ntohs(AddrSpec.Host16[6]) >> 8) == IN_LOOPBACKNET);
}


// ###### Check, if address is site local ###################################
inline bool InternetAddress::isSiteLocal() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_SITELOCAL(&AddrSpec.Address));
   }

   const card8 a = (card8)(ntohs(AddrSpec.Host16[6]) >> 8);
   if((a == IN_LOOPBACKNET) || (a == 10)) {
      return(true);
   }
   const card8 b = (card8)(ntohs(AddrSpec.Host16[6]) & 0x00ff);
   if((a == 192) && (b == 168)) {
      return(true);
   }
   else if(a == 172) {
      if((b >= 13) && (b <= 31)) {
         return(true);
      }
   }
   return(false);
}


// ###### Check, if address is global #######################################
inline bool InternetAddress::isGlobal() const
{
   return(!(isSiteLocal() || isLinkLocal() || isLoopback()));
}


// ###### Check, if address is node local multicast IPv6 ####################
inline bool InternetAddress::isNodeLocalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_NODELOCAL(&AddrSpec.Address));
   }
   return(false);
}


// ###### Check, if address is link local multicast IPv6 ####################
inline bool InternetAddress::isLinkLocalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_LINKLOCAL(&AddrSpec.Address));
   }
   if(IN_MULTICAST(ntohl(AddrSpec.Host32[3]))) {
      return( ((ntohl(AddrSpec.Host32[3])) & INADDR_MAX_LOCAL_GROUP) ==
               (ntohl(AddrSpec.Host32[3])) );
   }
   return(false);
}


// ###### Check, if address is site local multicast IPv6 ####################
inline bool InternetAddress::isSiteLocalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_SITELOCAL(&AddrSpec.Address));
   }
   return(false);
}


// ###### Check, if address is organization local multicast IPv6 ############
inline bool InternetAddress::isOrgLocalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_ORGLOCAL(&AddrSpec.Address));
   }
   return(false);
}


// ###### Check, if address is global multicast IPv6 ########################
inline bool InternetAddress::isGlobalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_GLOBAL(&AddrSpec.Address));
   }
   return(false);
}


// ###### Operator == #######################################################
inline int InternetAddress::operator==(const InternetAddress& address) const
{
   return(IN6_ARE_ADDR_EQUAL(&AddrSpec.Address,&address.AddrSpec.Address));
}


// ###### Operator != #######################################################
inline int InternetAddress::operator!=(const InternetAddress& address) const
{
   return(!IN6_ARE_ADDR_EQUAL(&AddrSpec.Address,&address.AddrSpec.Address));
}


// ###### Operator < ########################################################
inline int InternetAddress::operator<(const InternetAddress& address) const
{
   for(cardinal i = 0;i < 8;i++) {
      if(ntohs(AddrSpec.Host16[i]) < ntohs(address.AddrSpec.Host16[i])) {
         return(true);
      }
      else if(ntohs(AddrSpec.Host16[i]) > ntohs(address.AddrSpec.Host16[i])) {
         return(false);
      }
   }
   return(ntohs(Port) < ntohs(address.Port));
}


// ###### Operator > ########################################################
inline int InternetAddress::operator>(const InternetAddress& address) const
{
   for(cardinal i = 0;i < 8;i++) {
      if(ntohs(AddrSpec.Host16[i]) > ntohs(address.AddrSpec.Host16[i])) {
         return(true);
      }
      else if(ntohs(AddrSpec.Host16[i]) < ntohs(address.AddrSpec.Host16[i])) {
         return(false);
      }
   }
   return(Port > address.Port);
}


// ###### Operator <= #######################################################
inline int InternetAddress::operator<=(const InternetAddress& address) const
{
   return((*this < address) || (*this == address));
}


// ###### Operator >= #######################################################
inline int InternetAddress::operator>=(const InternetAddress& address) const
{
   return((*this > address) || (*this == address));
}


// ###### Operator = ########################################################
inline InternetAddress& InternetAddress::operator=(const InternetAddress& source)
{
   init(source);
   return(*this);
}


// ###### Get PortableAddress from InternetAddress ##########################
inline PortableAddress InternetAddress::getPortableAddress() const
{
   PortableAddress pa;
   for(cardinal i = 0;i < 8;i++) {
      pa.Host[i] = AddrSpec.Host16[i];
   }
   pa.Port = Port;
   return(pa);
} 


#endif
