/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2006 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * There are two mailinglists available at http://www.sctp.de which should be
 * used for any discussion related to this implementation.
 *
 * Contact: discussion@sctp.de
 *          dreibh@exp-math.uni-essen.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Internet Address Implementation
 *
 */

#ifndef INTERNETADDRESS_ICC
#define INTERNETADDRESS_ICC


#include "internetaddress.h"



// ###### Check, if IPv6 can be used ########################################
inline bool InternetAddress::hasIPv6()
{
   return(InternetAddress::UseIPv6);
}


// ###### Check, if address is loopback address #############################
inline bool InternetAddress::isNull() const
{
   for(cardinal i = 0;i < 8;i++) {
      if(Host[i] != 0x0000) {
         if(!((i == 5) && (Host[i] == 0xffff))) {
            return(false);
         }
      }
   }
   return(Port == 0);
}


// ###### Check, if address is IPv6 (not IPv4-mapped) #######################
inline bool InternetAddress::isIPv6() const
{
   return(!IN6_IS_ADDR_V4MAPPED((in6_addr*)&Host));
}


// ###### Check, if address is IPv4 or IPv4-mapped ##########################
inline bool InternetAddress::isIPv4() const
{
   return(IN6_IS_ADDR_V4MAPPED((in6_addr*)&Host) || IN6_IS_ADDR_UNSPECIFIED((in6_addr*)&Host));
}


// ###### Check, if address is IPv4-compatible IPv6 address #################
inline bool InternetAddress::isIPv4compatible() const
{
   return(IN6_IS_ADDR_V4COMPAT((in6_addr*)&Host));
}


// ###### Check, if address is null #########################################
inline bool InternetAddress::isLoopback() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_LOOPBACK((in6_addr*)&Host));
   }
   const card8 a = (card8)(ntohs(Host[6]) >> 8);
   return(a == IN_LOOPBACKNET);
}


// ###### Check, if address is unspecified ##################################
inline bool InternetAddress::isUnspecified() const
{
   for(cardinal i = 0;i < 8;i++) {
      if((in6_addr*)&Host[i] != 0x0000) {
         if(!((i == 5) && (Host[i] == 0xffff))) {
            return(false);
         }
      }
   }
   return(true);
}


// ###### Check, if address is IPv4 or IPv4-mapped class A ##################
inline bool InternetAddress::isClassA() const
{
   if(IN6_IS_ADDR_V4MAPPED((in6_addr*)&Host) || IN6_IS_ADDR_V4COMPAT((in6_addr*)&Host)) {
      return(IN_CLASSA(ntohl(*((card32*)&Host[6]))));
   }
   return(false);
}


// ###### Check, if address is IPv4 or IPv4-mapped class B ##################
inline bool InternetAddress::isClassB() const
{
   if(IN6_IS_ADDR_V4MAPPED((in6_addr*)&Host) || IN6_IS_ADDR_V4COMPAT((in6_addr*)&Host)) {
      return(IN_CLASSB(ntohl(*((card32*)&Host[6]))));
   }
   return(false);
}


// ###### Check, if address is IPv4 or IPv4-mapped class C ##################
inline bool InternetAddress::isClassC() const
{
   if(IN6_IS_ADDR_V4MAPPED((in6_addr*)&Host) || IN6_IS_ADDR_V4COMPAT((in6_addr*)&Host)) {
      return(IN_CLASSC(ntohl(*((card32*)&Host[6]))));
   }
   return(false);
}


// ###### Check, if address is multicast ####################################
inline bool InternetAddress::isMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MULTICAST((in6_addr*)&Host));
   }
   return(IN_MULTICAST(ntohl(*((card32*)&Host[6]))));
}


// ###### Check, if address is unicast ######################################
inline bool InternetAddress::isUnicast() const
{
   return(!(isMulticast() || isBroadcast()));
}


// ###### Check, if address is broadcast ####################################
inline bool InternetAddress::isBroadcast() const
{
   if(isIPv6()) {
      const card32* address = (card32*)&Host[0];
      return( ((address[0] == 0xffffffff) &&
               (address[1] == 0xffffffff) &&
               (address[2] == 0xffffffff) &&
               (address[3] == 0xffffffff)) );
   }
   return(ntohl(*((card32*)&Host[6])) == INADDR_BROADCAST);
}


// ###### Check, if address is reserved #####################################
inline bool InternetAddress::isReserved() const
{
   if(isIPv6()) {
      // This sould be extended...
      return(false);
   }
   return( IN_BADCLASS(ntohl(*((card32*)&Host[6]))) ||
           IN_EXPERIMENTAL(ntohl(*((card32*)&Host[6]))) );
}


// ###### Check, if address is link local ###################################
inline bool InternetAddress::isLinkLocal() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_LINKLOCAL((in6_addr*)&Host));
   }
   return((ntohs(Host[6]) >> 8) == IN_LOOPBACKNET);
}


// ###### Check, if address is site local ###################################
inline bool InternetAddress::isSiteLocal() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_SITELOCAL((in6_addr*)&Host));
   }

   const card8 a = (card8)(ntohs(Host[6]) >> 8);
   if((a == IN_LOOPBACKNET) || (a == 10)) {
      return(true);
   }
   const card8 b = (card8)(ntohs(Host[6]) & 0x00ff);
   if((a == 192) && (b == 168)) {
      return(true);
   }
   else if(a == 172) {
      if((b >= 13) && (b <= 31)) {
         return(true);
      }
   }
   return(false);
}


// ###### Check, if address is global #######################################
inline bool InternetAddress::isGlobal() const
{
   return(!(isSiteLocal() || isLinkLocal() || isLoopback()));
}


// ###### Check, if address is node local multicast IPv6 ####################
inline bool InternetAddress::isNodeLocalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_NODELOCAL((in6_addr*)&Host));
   }
   return(false);
}


// ###### Check, if address is link local multicast IPv6 ####################
inline bool InternetAddress::isLinkLocalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_LINKLOCAL((in6_addr*)&Host));
   }
   if(IN_MULTICAST(ntohl(*((card32*)&Host[6])))) {
      return( ((ntohl(*((card32*)&Host[6]))) & INADDR_MAX_LOCAL_GROUP) ==
               (ntohl(*((card32*)&Host[6]))) );
   }
   return(false);
}


// ###### Check, if address is site local multicast IPv6 ####################
inline bool InternetAddress::isSiteLocalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_SITELOCAL((in6_addr*)&Host));
   }
   return(false);
}


// ###### Check, if address is organization local multicast IPv6 ############
inline bool InternetAddress::isOrgLocalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_ORGLOCAL((in6_addr*)&Host));
   }
   return(false);
}


// ###### Check, if address is global multicast IPv6 ########################
inline bool InternetAddress::isGlobalMulticast() const
{
   if(isIPv6()) {
      return(IN6_IS_ADDR_MC_GLOBAL((in6_addr*)&Host));
   }
   return(false);
}


// ###### Operator == #######################################################
inline int InternetAddress::operator==(const InternetAddress& address) const
{
   return(IN6_ARE_ADDR_EQUAL((in6_addr*)&Host,(in6_addr*)&address.Host));
}


// ###### Operator != #######################################################
inline int InternetAddress::operator!=(const InternetAddress& address) const
{
   return(!IN6_ARE_ADDR_EQUAL((in6_addr*)&Host,(in6_addr*)&address.Host));
}


// ###### Operator < ########################################################
inline int InternetAddress::operator<(const InternetAddress& address) const
{
   for(cardinal i = 0;i < 8;i++) {
      if(ntohs(Host[i]) < ntohs(address.Host[i])) {
         return(true);
      }
      else if(ntohs(Host[i]) > ntohs(address.Host[i])) {
         return(false);
      }
   }
   return(ntohs(Port) < ntohs(address.Port));
}


// ###### Operator > ########################################################
inline int InternetAddress::operator>(const InternetAddress& address) const
{
   for(cardinal i = 0;i < 8;i++) {
      if(ntohs(Host[i]) > ntohs(address.Host[i])) {
         return(true);
      }
      else if(ntohs(Host[i]) < ntohs(address.Host[i])) {
         return(false);
      }
   }
   return(Port > address.Port);
}


// ###### Operator <= #######################################################
inline int InternetAddress::operator<=(const InternetAddress& address) const
{
   return((*this < address) || (*this == address));
}


// ###### Operator >= #######################################################
inline int InternetAddress::operator>=(const InternetAddress& address) const
{
   return((*this > address) || (*this == address));
}


// ###### Operator = ########################################################
inline InternetAddress& InternetAddress::operator=(const InternetAddress& source)
{
   init(source);
   return(*this);
}


// ###### Get PortableAddress from InternetAddress ##########################
inline PortableAddress InternetAddress::getPortableAddress() const
{
   PortableAddress pa;
   for(cardinal i = 0;i < 8;i++) {
      pa.Host[i] = Host[i];
   }
   pa.Port = Port;
   return(pa);
} 


#endif
