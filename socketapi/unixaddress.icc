/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2006 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * There are two mailinglists available at http://www.sctp.de which should be
 * used for any discussion related to this implementation.
 *
 * Contact: discussion@sctp.de
 *          dreibh@exp-math.uni-essen.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Unix address implementation
 *
 */


#ifndef UNIXADDRESS_ICC
#define UNIXADDRESS_ICC


#include "unixaddress.h"



// ###### Check, if address is null #########################################
inline bool UnixAddress::isNull() const
{
   return(Name[0] == 0x00);
}


// ###### Operator == #######################################################
inline int UnixAddress::operator==(const UnixAddress& address) const
{
   return(strcmp((char*)&Name,(char*)&address.Name) == 0);
}


// ###### Operator != #######################################################
inline int UnixAddress::operator!=(const UnixAddress& address) const
{
   return(strcmp((char*)&Name,(char*)&address.Name) != 0);
}


// ###### Operator < ########################################################
inline int UnixAddress::operator<(const UnixAddress& address) const
{
   return(strcmp((char*)&Name,(char*)&address.Name) < 0);
}


// ###### Operator > ########################################################
inline int UnixAddress::operator>(const UnixAddress& address) const
{
   return(strcmp((char*)&Name,(char*)&address.Name) > 0);
}


// ###### Operator <= #######################################################
inline int UnixAddress::operator<=(const UnixAddress& address) const
{
   return(strcmp((char*)&Name,(char*)&address.Name) <= 0);
}


// ###### Operator >= #######################################################
inline int UnixAddress::operator>=(const UnixAddress& address) const
{
   return(strcmp((char*)&Name,(char*)&address.Name) >= 0);
}


// ###### Operator = ########################################################
inline UnixAddress& UnixAddress::operator=(const UnixAddress& source)
{
   init(source);
   return(*this);
}


#endif
