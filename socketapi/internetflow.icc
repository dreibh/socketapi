/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2012 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: discussion@sctp.de
 *          dreibh@iem.uni-due.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Internet Flow Implementation
 *
 */

#ifndef INTERNETFLOW_ICC
#define INTERNETFLOW_ICC


#include "internetflow.h"


#include "tdin6.h"



// ###### Get flow info #####################################################
inline card32 InternetFlow::getFlowInfo() const
{
   return(ntohl(FlowInfo));
}


// ###### Get flow label ####################################################
inline card32 InternetFlow::getFlowLabel() const
{
   return(ntohl(FlowInfo) & IPV6_FLOWINFO_FLOWLABEL);
}


// ###### Get traffic class #################################################
inline card8 InternetFlow::getTrafficClass() const
{
   return((ntohl(FlowInfo) & IPV6_FLOWINFO_PRIORITY) >> 20);
}


// ###### Set traffic class #################################################
inline void InternetFlow::setTrafficClass(const card8 trafficClass)
{
   FlowInfo = htonl((ntohl(FlowInfo) & IPV6_FLOWINFO_FLOWLABEL) | ((card32)trafficClass << 20));
}


// ###### Set flow label ####################################################
inline void InternetFlow::setFlowLabel(const card32 flowLabel)
{
   FlowInfo = htonl((ntohl(FlowInfo) & IPV6_FLOWINFO_PRIORITY) | flowLabel);
}


#endif
