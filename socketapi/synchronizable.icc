/*
 *  $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2006 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * There are two mailinglists available at http://www.sctp.de which should be
 * used for any discussion related to this implementation.
 *
 * Contact: discussion@sctp.de
 *          dreibh@exp-math.uni-essen.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: Synchronizable Implementation
 *
 */


#ifndef SYNCHRONIZABLE_ICC
#define SYNCHRONIZABLE_ICC


#include "synchronizable.h"



// Debug mode: Print all synchronized() and unsynchronized() calls.
// #define PRINT_SYNCHRONIZED_CALLS



// ###### Begin of synchronized access ######################################
inline void Synchronizable::synchronized()
{
#ifdef SYNCDEBUGGER_PRINTING
   cerr << "u";
#endif

#ifndef NO_RECURSIVE_MUTEX
   pthread_mutex_lock(&Mutex);
#else
   if(!Recursive) {
      pthread_mutex_lock(&Mutex);
   }
   else {
      if(!pthread_equal(Owner,pthread_self())) {
         pthread_mutex_lock(&Mutex);
         Owner = pthread_self();
      }
   }
   RecursionLevel++;
#endif

#ifdef SYNCDEBUGGER_PRINTING
   cerr << "U";
#endif
}


// ###### Try begin of synchronized access ##################################
inline bool Synchronizable::synchronizedTry()
{
#ifdef SYNCDEBUGGER_PRINTING
   cerr << "t";
#endif

#ifndef NO_RECURSIVE_MUTEX
   const int result = pthread_mutex_trylock(&Mutex);
#else
   int result;
   if(!Recursive) {
      result = pthread_mutex_trylock(&Mutex);
      if(result == 0) {
         Owner = pthread_self();
         RecursionLevel++;
      }
   }
   else {
      if(!pthread_equal(Owner,pthread_self())) {
         result = pthread_mutex_trylock(&Mutex);
         if(result == 0) {
            Owner = pthread_self();
            RecursionLevel++;
         }
      }
      else {
         RecursionLevel++;
         result = 0;
      }
   }
#endif

   if(result == 0) {
#ifdef SYNCDEBUGGER_PRINTING
      cerr << "T";
#endif
      return(true);
   }
#ifdef SYNCDEBUGGER_PRINTING
   else {
      cerr << ".";
   }
#endif
   return(false);
}


// ###### End of synchronized access ########################################
inline void Synchronizable::unsynchronized()
{
#ifdef SYNCDEBUGGER_PRINTING
   cerr << "s";
#endif

#ifndef NO_RECURSIVE_MUTEX
   pthread_mutex_unlock(&Mutex);
#else
   if(RecursionLevel == 0) {
#ifndef DISABLE_WARNINGS
      cerr << "ERROR: Synchronizable::unsynchronized() - Mutex is already unlocked!" << endl;
      exit(1);
#endif
   }
   if(!Recursive) {
      RecursionLevel--;
      pthread_mutex_unlock(&Mutex);
   }
   else {
      if(pthread_equal(Owner,pthread_self())) {
         RecursionLevel--;
         if(RecursionLevel == 0) {
            Owner = 0;
            pthread_mutex_unlock(&Mutex);
         }
      }
      else {
#ifndef DISABLE_WARNINGS
         cerr << "ERROR: Synchronizable::unsynchronized() - Mutex is not owned!" << endl;
         exit(1);
#endif
      }
   }
#endif

#ifdef SYNCDEBUGGER_PRINTING
   cerr << "S";
#endif
}


// ###### Get name ##########################################################
inline const char* Synchronizable::getName() const
{
   if(MutexName[0] != 0x00) {
      return((const char*)&MutexName);
   }
   else {
      return("Unnamed Mutex");
   }
}


// ###### Set name ##########################################################
inline void Synchronizable::setName(const char* name)
{
   if(name != NULL) {
      snprintf((char*)&MutexName,sizeof(MutexName),"%s",name);
   }
   else {
      MutexName[0] = 0x00;
   }
}


#endif
