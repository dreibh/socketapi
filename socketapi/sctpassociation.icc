/*
 * $Id$
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2020 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: discussion@sctp.de
 *          dreibh@iem.uni-due.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: SCTP Association
 *
 */


#ifndef SCTPASSOCIATION_ICC
#define SCTPASSOCIATION_ICC


#include "tdsystem.h"
#include "sctpassociation.h"



// ###### Get association ID ################################################
inline unsigned int SCTPAssociation::getID() const
{
   return(AssociationID);
}


// ###### Get notification flags ############################################
inline unsigned int SCTPAssociation::getNotificationFlags() const
{
   return(NotificationFlags);
}


// ###### Set notification flags ############################################
inline void SCTPAssociation::setNotificationFlags(const unsigned int notificationFlags)
{
   NotificationFlags = notificationFlags;
}


// ###### Get pointer to update condition ###################################
inline Condition* SCTPAssociation::getUpdateCondition(const UpdateConditionType type)
{
   switch(type) {
      case UCT_Read:
         if(!ReadReady) {
            ReadUpdateCondition.fired();
         }
         else {
            ReadUpdateCondition.broadcast();
         }
         return(&ReadUpdateCondition);
       break;
      case UCT_Write:
         if(!WriteReady) {
            WriteUpdateCondition.fired();
         }
         else {
            WriteUpdateCondition.broadcast();
         }
         return(&WriteUpdateCondition);
       break;
      case UCT_Except:
         if(!HasException) {
            ExceptUpdateCondition.fired();
         }
         else {
            ExceptUpdateCondition.broadcast();
         }
         return(&ExceptUpdateCondition);
       break;
   }
   return(NULL);
}


// ###### Send ##############################################################
inline int SCTPAssociation::send(const char*          buffer,
                                 const size_t         length,
                                 const int            flags,
                                 const unsigned short streamID,
                                 const unsigned int   protoID,
                                 const unsigned int   timeToLive,
                                 const bool           useDefaults)
{
   return(sendTo(buffer, length, flags, streamID, protoID, timeToLive,
                 useDefaults, NULL));
}


#endif
