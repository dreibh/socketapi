/*
 *  $Id: portableaddress.icc
 *
 * SocketAPI implementation for the sctplib.
 * Copyright (C) 1999-2011 by Thomas Dreibholz
 *
 * Realized in co-operation between
 * - Siemens AG
 * - University of Essen, Institute of Computer Networking Technology
 * - University of Applied Sciences, Muenster
 *
 * Acknowledgement
 * This work was partially funded by the Bundesministerium fuer Bildung und
 * Forschung (BMBF) of the Federal Republic of Germany (Foerderkennzeichen 01AK045).
 * The authors alone are responsible for the contents.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact: discussion@sctp.de
 *          dreibh@iem.uni-due.de
 *          tuexen@fh-muenster.de
 *
 * Purpose: This file implements a portable address
 *
 */


#ifndef PORTABLEADDRESS_ICC
#define PORTABLEADDRESS_ICC


#include "portableaddress.h"



// ###### Reset #############################################################
inline void PortableAddress::reset()
{
   for(cardinal i = 0;i < 8;i++) {
      Host[i] = 0;
   }
   Port = 0;
}


// ###### Operator < ########################################################
inline int PortableAddress::operator<(const PortableAddress& address) const
{
   for(cardinal i = 0;i < 8;i++) {
      if(Host[i] < address.Host[i])
         return(true);
      else if(Host[i] > address.Host[i])
         return(false);
   }
   return(Port < address.Port);
}


// ###### Operator > ########################################################
inline int PortableAddress::operator>(const PortableAddress& address) const
{
   for(cardinal i = 0;i < 8;i++) {
      if(Host[i] > address.Host[i])
         return(true);
      else if(Host[i] < address.Host[i])
         return(false);
   }
   return(Port > address.Port);
}


// ###### Operator <= #######################################################
inline int PortableAddress::operator<=(const PortableAddress& address) const
{
   return((*this < address) || (*this == address));
}


// ###### Operator >= #######################################################
inline int PortableAddress::operator>=(const PortableAddress& address) const
{
   return((*this > address) || (*this == address));
}

// ###### Operator == #######################################################
inline int PortableAddress::operator==(const PortableAddress& address) const
{
   return((Host[0] == address.Host[0]) &&
          (Host[1] == address.Host[1]) &&
          (Host[2] == address.Host[2]) &&
          (Host[3] == address.Host[3]) &&
          (Host[4] == address.Host[4]) &&
          (Host[5] == address.Host[5]) &&
          (Host[6] == address.Host[6]) &&
          (Host[7] == address.Host[7]) &&
          (Port == address.Port));
          
}


// ###### Operator != #######################################################
inline int PortableAddress::operator!=(const PortableAddress& address) const
{
   return((Host[0] != address.Host[0]) ||
          (Host[1] != address.Host[1]) ||
          (Host[2] != address.Host[2]) ||
          (Host[3] != address.Host[3]) ||
          (Host[4] != address.Host[4]) ||
          (Host[5] != address.Host[5]) ||
          (Host[6] != address.Host[6]) ||
          (Host[7] != address.Host[7]) ||
          (Port != address.Port));          
}


#endif
